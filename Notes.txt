Dictionary: 
list: 

list manupulation 
-----------------


insert: to insert new element 
-----------------------------
stock_list=['apple','ril','tamo']
stock_list.insert(3(index),item['microsoft'])
result=
stock_list=['apple','ril','tamo','microsoft']

remove : to remove an item 
--------------------------
stock_list=['apple','ril','tamo']
stock_list.remove('tamo')
print (stock_list)
result=['apple','ril']

pop:remove the last item of a list , if do not provide any index it removes the last item of the list
--------------------------
stock_list=['apple','ril','tamo']
stock_list.pop()
print(stock_list)
result=['apple','ril']

stock_list.pop(1)
print(stock_list)
result=['apple','tamo']

index: it returns the index of an element in a list 
-----------------------------------------------
stock_list=['apple','ril','tamo']
stock_list.index('tamo')
stock_list=['apple','ril','tamo']
print(stock_list.index('tamo'))
print(stock_list.index('ril'))


reverse: it reverse the list
----------------------------


sort: to call the list 
----------------------

stackes: stack is made using append, pop, where LIFO is consider like last in first out . where pop takes out the last element 
----------------------

stack.append(5)
Stack=[1,2,4,5]

stack.append(6)
Stack=[1,2,4,5,6]

stack.pop()
stack=[1,2,4,5]

stack.pop()
Stack=[1,2,4]
stack.pop()
Stack=[1,2]

Queue: its same as stack but here its function is Fist In First Out [fifo]where popleft is used and remove the fist element

deque is used for faster execution , help to work on both side operation fifo and lifo
--------------------------------------------------------------------------

from collections import deque 

queue = deque(['apple','mango', 'banana'])
#introduced deque here by converting the set from queue to deque
queue.append('cashew')
queue.append('almond')
queue.popleft()
queue.popleft()
print(queue)

deque.extend[7,8,9,9,1]
deque.rotate[-4]
deque.extendleft[4,8,3]
deque.reverse[-2]


---------------------------------------
to import libraries :
#import collections as coll
to get a object from the collections 
#from collections import deque
to get what it holds [object]
#dir(library_name)

--------------------------------------
breaking the large classes into smaller classes that work together called Composition




--------------------------------------

What the point of using parent class if I commenting out the class parent class still the output is same 

class Restaurant :
    """A simple restaurant class"""
    def __init__(self,restaurant_name,cuisine_type,number_served=0):
        self.restaurant_name =restaurant_name
        self.cuisine_type =cuisine_type 
        self.number_served = number_served
    def describe_restaurant(self) :
        print(f"Name of the restaurant - {self.restaurant_name} and served {self.cuisine_type}")
        print(f"{self.restaurant_name} served {self.cuisine_type}")
    def open_restaurant(self) :
        print(f"{self.restaurant_name}  is now OPEN  ")
    def set_number_served(self,served) :
        self.number_served = served
    def increment_number_served(self,add_served) :
        self.number_served += add_served
class IceCreamStand (Restaurant) :
    def __init__(self,restaurant_name,cuisine_type,flavours,number_served):
        """Initialize attributes of the parentclass"""
        #super().__init__(restaurant_name,cuisine_type,number_served=0)
        self.flavours = flavours 
    def display_flavours(self):
        print ("Available flavours are : ")
        for flavour in self.flavours :
            print(f"  - {flavour}")
all_flavours = IceCreamStand('Muse', 'Mexican',['orange','pinapple','mango'],90)

all_flavours.display_flavours()
my_restaurant= Restaurant('Muse', 'Mexican')
my_restaurant.describe_restaurant()
my_restaurant.open_restaurant()

my_restaurant.set_number_served (94)
print(f"Total {my_restaurant.number_served} number of great customer served ")
my_restaurant.increment_number_served (6)
print(f"And calling the day off with {my_restaurant.number_served} customers in total.")



>>>>

Good question! You are right that commenting out the parent class (`Restaurant`) initialization in the `IceCreamStand` class does not immediately break the code or change the output in your case. But this is because the specific part of the parent class (`Restaurant`) you are commenting out is not directly used in the `IceCreamStand` class in this current setup.

Here's why the inheritance is still important, even though it seems to work without it in your specific example:

### 1. **Inheritance Provides Reusability and Flexibility**:
   By inheriting from `Restaurant`, the `IceCreamStand` class can reuse all the methods and attributes of `Restaurant`. This means you don’t have to rewrite methods like `describe_restaurant()`, `open_restaurant()`, `set_number_served()`, or `increment_number_served()`. Even though in this specific case, you're not using those methods in the `IceCreamStand` class, inheritance gives you the option to do so later without duplicating code.

### 2. **Why Your Current Code Works Without It**:
   In your code, you haven’t used any `Restaurant` class methods or attributes inside `IceCreamStand`. Since the only thing the `IceCreamStand` class is doing is handling flavors (via the `display_flavours()` method), you don't immediately notice the absence of `super()` because you're not using any of the inherited functionality.

   If you commented out the parent class initialization (`super().__init__()`) but tried to access any `Restaurant` attributes (like `restaurant_name`, `cuisine_type`, or `number_served`) inside `IceCreamStand`, you would get an error because those attributes wouldn't be initialized.

### Example Showing the Importance of `super()`:
Let's modify the `IceCreamStand` class so it uses the `Restaurant` attributes. You'll see the need for `super()` in this case.


class IceCreamStand(Restaurant):
    def __init__(self, restaurant_name, cuisine_type, flavours, number_served=0):
        """Initialize attributes of the parent class"""
        super().__init__(restaurant_name, cuisine_type, number_served)  # Call parent init
        self.flavours = flavours

    def display_flavours(self):
        print(f"{self.restaurant_name} offers the following flavours:")  # Using Restaurant attribute
        for flavour in self.flavours:
            print(f"  - {flavour}")


Now, the `display_flavours()` method uses `self.restaurant_name`, which is defined in the parent class (`Restaurant`). If you comment out the `super().__init__()` line, the code will break because `restaurant_name` won't be initialized in `IceCreamStand`.

### 3. **Code Duplication**:
If you don't use inheritance, you might need to copy the same methods into multiple classes if they share functionality (like `open_restaurant()` or `describe_restaurant()`). This makes the code harder to maintain. If you need to change the behavior of a shared method later, you'd have to update it in multiple places instead of just the parent class.

### Conclusion:
In your current code, inheritance might not seem necessary because `IceCreamStand` is not using any parent class methods or attributes. But in a real-world scenario, you'd likely want the `IceCreamStand` class to have the functionality of the `Restaurant` class (like setting the number of customers served or opening the restaurant), and that's when `super()` and inheritance will become essential. It helps avoid code duplication and makes the code easier to maintain and extend.


>>>>

how to access parent class attribute then where super is used .

Great! Let's dive into how to properly access parent class attributes when using `super()` in the child class. 

When you use `super()` in the child class, you are initializing the parent class (in this case, `Restaurant`) and gaining access to all its methods and attributes.

Here's an example of how you can access parent class attributes after calling `super()` in the child class:

### Complete Example

```python
# Parent Class: Restaurant
class Restaurant:
    """A simple restaurant class."""
    def __init__(self, restaurant_name, cuisine_type, number_served=0):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = number_served

    def describe_restaurant(self):
        print(f"Restaurant: {self.restaurant_name} serves {self.cuisine_type} cuisine.")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now OPEN!")

    def set_number_served(self, served):
        self.number_served = served

    def increment_number_served(self, add_served):
        self.number_served += add_served

# Child Class: IceCreamStand (inherits from Restaurant)
class IceCreamStand(Restaurant):
    """A specialized version of a restaurant that serves ice cream."""
    def __init__(self, restaurant_name, cuisine_type, flavours, number_served=0):
        # Use super() to initialize attributes from the parent class (Restaurant)
        super().__init__(restaurant_name, cuisine_type, number_served)
        self.flavours = flavours

    # Method specific to IceCreamStand to display the ice cream flavours
    def display_flavours(self):
        print(f"{self.restaurant_name} offers the following ice cream flavours:")
        for flavour in self.flavours:
            print(f"  - {flavour}")

# Creating an instance of IceCreamStand and accessing parent class attributes
my_ice_cream_stand = IceCreamStand('Chillz Delight', 'Desserts', ['Vanilla', 'Chocolate', 'Strawberry'], 50)

# Accessing methods from the parent class
my_ice_cream_stand.describe_restaurant()  # This method is from the Restaurant class
my_ice_cream_stand.open_restaurant()      # This method is from the Restaurant class

# Accessing the number of customers served, an attribute inherited from Restaurant
print(f"Number of customers served: {my_ice_cream_stand.number_served}")

# Using the IceCreamStand-specific method to display flavours
my_ice_cream_stand.display_flavours()
```

### Output
```
Restaurant: Chillz Delight serves Desserts cuisine.
Chillz Delight is now OPEN!
Number of customers served: 50
Chillz Delight offers the following ice cream flavours:
  - Vanilla
  - Chocolate
  - Strawberry
```

### Key Takeaways:
- **`super().__init__()`** is used in the `IceCreamStand` class to initialize the attributes from the `Restaurant` parent class (`restaurant_name`, `cuisine_type`, and `number_served`).
- After calling `super()`, the `IceCreamStand` object (`my_ice_cream_stand`) can access both the parent class methods (`describe_restaurant()`, `open_restaurant()`) and its attributes (`restaurant_name`, `number_served`).
- The `display_flavours()` method is unique to `IceCreamStand`, but it still uses the `restaurant_name` attribute inherited from `Restaurant`.

This demonstrates how you can effectively use `super()` to inherit attributes and methods from a parent class, and then extend or specialize them in the child class.





# Exercise 9-6: Ice Cream Stand
class Restaurant:
    """A simple restaurant class."""
    def __init__(self, restaurant_name, cuisine_type, number_served=0):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = number_served
    
    def describe_restaurant(self):
        print(f"Restaurant: {self.restaurant_name}, Cuisine: {self.cuisine_type}")
    
    def open_restaurant(self):
        print(f"{self.restaurant_name} is now OPEN.")
    
    def set_number_served(self, served):
        self.number_served = served
    
    def increment_number_served(self, add_served):
        self.number_served += add_served

class IceCreamStand(Restaurant):
    """An ice cream stand that inherits from the Restaurant class."""
    def __init__(self, restaurant_name, cuisine_type, flavours):
        """Initialize attributes of the parent class and flavors."""
        super().__init__(restaurant_name, cuisine_type)
        self.flavours = flavours
    
    def display_flavours(self):
        """Display the list of available ice cream flavors."""
        print(f"Available flavors for {self.restaurant_name}:")
        for flavour in self.flavours:
            print(f"  - {flavour}")

# Creating an instance of IceCreamStand
ice_cream_stand = IceCreamStand('Swice', 'Creamheaven', ['orange', 'pineapple', 'mango'])
ice_cream_stand.display_flavours()


# Exercise 9-7 & 9-8: Admin Class with Privileges Class
class Users:
    """A simple user class."""
    def __init__(self, first_name, last_name, **other_attributes):
        """Initialize user attributes."""
        self.first_name = first_name
        self.last_name = last_name
        self.other_attributes = other_attributes

    def describe_user(self):
        """Describe the user."""
        print(f"User: {self.first_name} {self.last_name}")
        for key, value in self.other_attributes.items():
            print(f"{key}: {value}")

    def greet_user(self):
        """Greet the user."""
        print(f"Hello, {self.first_name}!")

class Privileges:
    """A class to manage privileges of an admin."""
    def __init__(self, privileges=[]):
        """Initialize privileges attribute."""
        self.privileges = privileges

    def show_privileges(self):
        """Display the privileges."""
        print("Privileges:")
        if self.privileges:
            for privilege in self.privileges:
                print(f"- {privilege}")
        else:
            print("- No privileges assigned")

class Admin(Users):
    """Admin class inherits from Users and includes privileges."""
    def __init__(self, first_name, last_name, **other_attributes):
        """Initialize the Admin class with user attributes and privileges."""
        super().__init__(first_name, last_name, **other_attributes)
        self.privileges = Privileges()  # Create an instance of Privileges class

# Creating an Admin instance and assigning privileges
admin_user = Admin('John', 'Doe')
admin_user.privileges.privileges = ["can add post", "can delete post", "can ban user"]
admin_user.privileges.show_privileges()


Q :  why there is no error after passing only two attribute [admin_user = Admin('John', 'Doe')] 





The absence of an error when you create an instance of the `Admin` class with only two attributes (`first_name` and `last_name`) is due to the way you've structured the `__init__` method in the `Admin` class and the parent `Users` class.

### Breakdown of How This Works

1. **Flexible `__init__` Method**:
   - In your `Users` class, the `__init__` method is defined as follows:
     
     def __init__(self, first_name, last_name, **other_attributes):
     
     This method takes `first_name` and `last_name` as required parameters and allows for any number of additional keyword arguments (`**other_attributes`). This means you can create a `Users` instance with just the two required parameters, and any additional parameters will simply be captured as a dictionary in `other_attributes`.

2. Inheritance in `Admin`
   - In the `Admin` class, you're calling the parent class's `__init__` method using `super()`:
     
     super().__init__(first_name, last_name, **other_attributes)
     
     This line passes `first_name`, `last_name`, and any additional attributes (if provided) up to the `Users` class's `__init__` method.

3. Creating an Admin Instance:
   - When you create an instance of the `Admin` class like this:
     
     admin_user = Admin('John', 'Doe')
     
     You are only providing `first_name` and `last_name`. Since you haven't provided any additional keyword arguments, `other_attributes` will be an empty dictionary.

### What Happens Under the Hood

- The `Users` class's `__init__` method gets called with:
  - `first_name = 'John'`
  - `last_name = 'Doe'`
  - `other_attributes = {}` (empty dictionary)
- The `__init__` method executes without any errors because it only requires `first_name` and `last_name` to be passed explicitly, while `other_attributes` is optional.

### Example of Adding Additional Attributes

If you wanted to add more attributes when creating the `Admin` instance, you could do it like this:

admin_user = Admin('John', 'Doe', age=30, role='administrator')


In this case, the `age` and `role` attributes would be captured in `other_attributes` within the `Users` class:
- `other_attributes` would be `{'age': 30, 'role': 'administrator'}`.

### Summary

The design of the `Users` class with `**other_attributes` allows for flexibility in creating instances of the `Admin` class (and `Users` class in general), enabling you to pass only the required attributes without raising errors if you omit additional ones. This is a common practice in Python to make classes more adaptable and easier to use.